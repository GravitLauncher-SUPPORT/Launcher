def mainClassName = "pro.gravit.launchserver.Main"
def mainAgentName = "pro.gravit.launchserver.StarterAgent"

evaluationDependsOn(':Launcher')

repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://jcenter.bintray.com/"
    }
    maven {
        url "https://jitpack.io/"
    }
    maven {
        url 'https://maven.gravit-support.ru/repository/jitpack'
        credentials {
            username = 'gravitlauncher'
            password = 'gravitlauncher'
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    bundleOnly
    bundle
    pack
    proguardPack
    bundleOnly.extendsFrom bundle
    api.extendsFrom bundle, pack
}

jar {
    dependsOn parent.childProjects.Launcher.tasks.assemble
    from { configurations.pack.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude("module-info.class")
    from(parent.childProjects.Launcher.tasks.shadowJar)
    from(parent.childProjects.Launcher.tasks.genRuntimeJS)
    manifest.attributes("Main-Class": mainClassName,
            "Premain-Class": mainAgentName,
            "Multi-Release": "true",
            "Automatic-Module-Name": "launchserver"
    )
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

tasks.register('cleanjar', Jar) {
    dependsOn jar
    archiveClassifier.set('clean')
    manifest.attributes("Main-Class": mainClassName,
            "Automatic-Module-Name": "launchserver"
    )
    from sourceSets.main.output
}


dependencies {
    pack(project(':LauncherAPI')) {
        exclude group: "com.google.code.gson"
    }
    bundle group: 'com.google.code.gson', name: 'gson', version: rootProject['verGson']
    bundle group: 'me.tongfei', name: 'progressbar', version: '0.10.1'
    bundle group: 'org.fusesource.jansi', name: 'jansi', version: rootProject['verJansi']
    bundle group: 'org.jline', name: 'jline-native', version: rootProject['verJline']
    bundle group: 'org.jline', name: 'jline-reader', version: rootProject['verJline']
    bundle group: 'org.jline', name: 'jline-terminal-ffm', version: rootProject['verJline']
    bundle group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: rootProject['verBcpkix']
    bundle group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: rootProject['verBcpkix']
    bundle group: 'org.ow2.asm', name: 'asm-commons', version: rootProject['verAsm']
    bundle group: 'io.netty', name: 'netty-codec-http', version: rootProject['verNetty']
    bundle group: 'io.netty', name: 'netty-transport-classes-epoll', version: rootProject['verNetty']
    bundle group: 'io.netty', name: 'netty-transport-native-epoll', version: rootProject['verNetty'], classifier: 'linux-x86_64'
    //bundle group: 'io.netty', name: 'netty-transport-native-epoll', version: rootProject['verNetty'], classifier: 'linux-aarch_64'
    bundle group: 'io.netty', name: 'netty-transport-classes-io_uring', version: rootProject['verNetty']
    bundle group: 'io.netty', name: 'netty-transport-native-io_uring', version: rootProject['verNetty'], classifier: 'linux-x86_64'
    //bundle group: 'io.netty', name: 'netty-transport-native-io_uring', version: rootProject['verNetty'], classifier: 'linux-aarch_64'
    // Netty
    bundle 'org.jboss.marshalling:jboss-marshalling:1.4.11.Final'
    bundle 'com.google.protobuf.nano:protobuf-javanano:3.1.0'
    //
    bundle group: 'org.slf4j', name: 'slf4j-api', version: rootProject['verSlf4j']
    bundle group: 'com.mysql', name: 'mysql-connector-j', version: rootProject['verMySQLConn']
    bundle group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: rootProject['verMariaDBConn']
    bundle group: 'org.postgresql', name: 'postgresql', version: rootProject['verPostgreSQLConn']
    bundle group: 'com.h2database', name: 'h2', version: rootProject['verH2Conn']
    proguardPack group: 'com.guardsquare', name: 'proguard-base', version: rootProject['verProguard']
    bundle group: 'org.apache.logging.log4j', name: 'log4j-core', version: rootProject['verLog4j']
    bundle group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl', version: rootProject['verLog4j']
    bundle group: 'io.jsonwebtoken', name: 'jjwt-api', version: rootProject['verJwt']
    bundle group: 'io.jsonwebtoken', name: 'jjwt-impl', version: rootProject['verJwt']
    bundle group: 'io.jsonwebtoken', name: 'jjwt-gson', version: rootProject['verJwt']
    bundle group: 'com.google.code.gson', name: 'gson', version: rootProject['verGson']
    annotationProcessor(group: 'org.apache.logging.log4j', name: 'log4j-core', version: rootProject['verLog4j'])
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: rootProject['verJunit']
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"

    bundle 'io.micrometer:micrometer-core:1.14.4'
    bundle('com.zaxxer:HikariCP:6.2.1') {
        exclude group: 'javassist'
        exclude group: 'io.micrometer'
        exclude group: 'org.slf4j'
    }
}

tasks.register('dumpLibs', Copy) {
    duplicatesStrategy = 'EXCLUDE'
    into "$buildDir/libs/libraries"
    from configurations.bundleOnly
}

tasks.register('dumpProguard', Copy) {
    duplicatesStrategy = 'EXCLUDE'
    into "$buildDir/libs/proguard-libraries"
    from configurations.proguardPack
}

tasks.register('bundle', Zip) {
    duplicatesStrategy = 'EXCLUDE'
    dependsOn parent.childProjects.Launcher.tasks.build, tasks.dumpLibs, tasks.jar
    archiveFileName = 'LaunchServer.zip'
    destinationDirectory = file("$buildDir")
    from(tasks.dumpLibs.destinationDir) { into 'libraries' }
    from(tasks.jar)
    from(parent.childProjects.Launcher.tasks.dumpLibs) { into 'launcher-libraries' }
}

tasks.register('dumpClientLibs', Copy) {
    dependsOn parent.childProjects.Launcher.tasks.build
    into "$buildDir/libs/launcher-libraries"
    from parent.childProjects.Launcher.tasks.dumpLibs
}

assemble.dependsOn tasks.dumpLibs, tasks.dumpClientLibs, tasks.bundle, tasks.cleanjar, tasks.dumpProguard


publishing {
    publications {
        launchserverapi(MavenPublication) {
            artifactId = 'launchserver-api'
            artifact(cleanjar) {
                classifier ""
            }
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'GravitLauncher LaunchServer API'
                description = 'GravitLauncher LaunchServer Module API'
                url = 'https://gravitlauncher.com'
                licenses {
                    license {
                        name = 'GNU General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'gravita'
                        name = 'Gravita'
                        email = 'gravita@gravit.pro'
                    }
                    developer {
                        id = 'zaxar163'
                        name = 'Zaxar163'
                        email = 'zahar.vcherachny@yandex.ru'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/GravitLauncher/Launcher.git'
                    developerConnection = 'scm:git:ssh://git@github.com:GravitLauncher/Launcher.git'
                    url = 'https://gravitlauncher.com/'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.launchserverapi
}
